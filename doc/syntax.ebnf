
<fundef> ::= <fundecl> <body>
<fundecl> ::= "fun" <ident> ( <typename> <ident> "," )* ( <typename> <ident> )? ( "->" <typename> )? "extern"?

<typedef> ::= <typedecl> <structfields> 
            | <typedecl> <typename>
            | <typedecl> <typename> ( "|" <typename> )+
<structfields> ::= "{" ( <typename> <ident> "," )* ( <typename> <ident>? ) "}"

<typedecl> ::= "type" <user-typename> ":=" 

<stmt> ::= <callexpr> | <assignstmt> | <varstmt> | <retstmt> | <matchexpr> | <ifexpr> | "break" | "cont"

<matchcase> ::= <user-typename> "{" ( <ident> ":" <matchcase> "," )* ( <ident> ":" <matchcase> )? "}"
              | <literal>
              | <ident>

<matcharm> ::= ( <matchcase> | "default" ) "->" ( <body> | <expr> | <phistmt> )
<matchexpr> ::= "match" <expr> "{" ( <matcharm> "," )* <matcharm>? "}"

<retstmt> ::= "return" <expr>?
<phistmt> ::= "phi" <expr>
<assignstmt> ::= ( <varaccessexpr> | <varstmt> ) ":=" <expr>
<varstmt> ::= ( "let" | "mut" ) <ident>
<loopstmt> ::= "loop" <body>
<ifexpr> ::= "if" <expr> <body> ( ( "else" <body> ) | ( "else" <ifstmt> ) )

<body> ::= "{" <stmt>* "}"

<expr> ::= <literal> | <prefix> | <op> <expr> | <expr> <op> <expr> | <ifexpr> | <matchexpr>

<prefixexpr> ::= <varaccessexpr> | <callexpr> | "(" <expr> ")"

<callexpr> ::= <ident> "(" ( <expr> "," )* <expr>? ")"
<varaccessexpr> ::= <ident>
                  | <prefix> "[" <expr> "]"
                  | <prefix> "." <ident>

<typename> ::= "bool" | "char" | "()"
             | ( "i" | "u" ) ( "8" | "16" | "32" | "64" )
             | "f" ( "32" | "64" )
             | <ident> ( "<" ( ""))
             | <user-typename>
             | "*" <typename>
             | <array-typename>

<array-typename> ::= "[" <digit>+? "]" <typename> 

<user-typename> ::= <ident> ( "(" ( (<typename> "," )* <typename>? ) ")" )?

<literal> ::= <string-literal> | <bool-literal> | <char-literal> | <number-literal>

<string-literal> ::= "\"" ( . | ( "\\" . ) )* "\""
<bool-literal> ::= "true" | "false"
<char-literal> ::= "'" ( . | "\\" . ) "'"

<op> ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "~" | "^" | "<" | ">" | "="
       | "<=" | ">=" | "<<" | ">>" | "&&" | "||" | "!" | "!="

<number-literal> ::= <digit>+ "."? <digit>* ( "e" ( "+" | "-" ) <digit>+)?
                   | "0b" ( "0" | "1" )+
                   | "0x" ( <digit> | "a" | "b" | "c" | "d" | "e" | "f" )+
                   | "0o" ( "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" )+

<ident> ::= .+
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
ns std::alloc {

//Allocate a specified amount of bytes on the heap, returning a pointer to the
//allocated memory
fun malloc(usize nbytes) u8 ptr {
    let std::win::types::Handle heap = _internal::GetProcessHeap();
    if heap == std::win::types::INVALID_HANDLE_VALUE {
        ret {u8 ptr}0;
    };
    ret _internal::HeapAlloc(heap, 0u32, nbytes);
}

//Free memory previously allocated with malloc
fun free(u8 ptr mem) void {
    let std::win::types::Handle heap = _internal::GetProcessHeap();
    _internal::HeapFree(heap, 0u32, mem);
    ret;
}

ns _internal {
use std::win::types

fun ext GetProcessHeap() types::Handle
fun ext HeapAlloc(types::Handle hHeap, types::Dword dwFlags, usize dwBytes) u8 ptr
fun ext HeapFree(types::Handle hHeap, types::Dword dwFlags, u8 ptr lpMem) types::Bool

}

}